#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('fooding-server:server');
let http = require('http');

let moment = require('moment');
moment.locale("ko");

const { PORT } = process.env;

let port = normalizePort(PORT);
app.set('port', port);

let server = http.createServer(app);
const io = require("socket.io")(server, {
  path: "/socket",
  transports: ["websocket"]
});

require('../socket')(io);

server.listen(port, () => {
  console.log(`서버 시작 포트번호 :  ${port}`);
  console.log('[현재 시간 : ', moment(new Date()).format("MM / DD / ddd HH시mm분]"));
  process.send("ready");
});
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}